#!/usr/bin/env python3
"""
Add a group to the database using a Telegram group link.

This script:
1. Prompts the user for a group link
2. Asks for a chat ID to associate with the link (since we can't extract it directly from the link)
3. Adds the group to the database with a descriptive title
4. Optionally sends a test message to the group

Usage:
python add_group_link.py
"""

import asyncio
import sys
import logging
import sqlite3
from datetime import datetime
import re

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Import project modules
from bot import broadcast_news
from models import News
import database


def extract_group_info(group_link):
    """Try to extract information from a group link"""
    
    # For testing, check if it's a group link
    if not group_link or not group_link.startswith('https://t.me/'):
        logger.error(f"Invalid group link format: {group_link}")
        return None
        
    # Extract any identifiable information from the link
    # For private groups with invite links, we can't extract the actual ID
    link_id = group_link.split('t.me/')[1]
    
    # For readable info
    if link_id.startswith('+'):
        return f"Private group with invite code: {link_id[1:][:8]}..."
    else:
        return f"Public group: @{link_id}"


def clean_test_chats():
    """Remove all test chats from the database"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM chats")
    conn.commit()
    conn.close()
    logger.info("Cleaned all chats from database")


def add_group_chat(chat_id, group_link):
    """Add a group chat to the database"""
    if not chat_id:
        logger.error("No chat ID provided.")
        return False
    
    # Convert to integer to ensure it's a valid ID
    try:
        chat_id = int(chat_id)
    except ValueError:
        logger.error(f"Invalid chat ID format: {chat_id}. Must be an integer.")
        return False
    
    # Create a descriptive name based on the link
    group_info = extract_group_info(group_link)
    chat_title = f"ูุฌููุนุฉ ุฃุฎุจุงุฑ ุงููุฑูุจุชู - {group_info}" if group_info else f"ูุฌููุนุฉ ุฃุฎุจุงุฑ ุงููุฑูุจุชู {chat_id}"
    
    # Add chat to database
    database.add_chat(chat_id, chat_title, "supergroup")
    logger.info(f"Added group chat ID {chat_id} to database")
    return True


def create_test_news():
    """Create a test crypto news item"""
    return News(
        news_id=f"test-{datetime.now().strftime('%Y%m%d%H%M%S')}",
        title="๐ ุงุฎุชุจุงุฑ ุฅุฑุณุงู ููุฌููุนุฉ: ุฃุฎุจุงุฑ ุจูุชูููู",
        content="ูุฐุง ุงุฎุชุจุงุฑ ูุจูุช ุฃุฎุจุงุฑ ุงููุฑูุจุชู ููุชุฃูุฏ ูู ุฅููุงููุฉ ุงูุฅุฑุณุงู ูููุฌููุนุงุช. ุฅุฐุง ููุช ุชุฑู ูุฐู ุงูุฑุณุงูุฉุ ููุฐุง ูุนูู ุฃู ุงูุจูุช ูุนูู ุจุดูู ุตุญูุญ ูููููู ุฅุฑุณุงู ุงูุฃุฎุจุงุฑ ุชููุงุฆูุงู ูููุฌููุนุงุช. ุงูุจูุชูููู ูุชุฌุงูุฒ ุงูู 70 ุฃูู ุฏููุงุฑ!",
        source="ุงุฎุชุจุงุฑ ุจูุช ุฃุฎุจุงุฑ ุงููุฑูุจุชู",
        url="https://example.com/crypto-news-group-test",
        tags=["ุงุฎุชุจุงุฑ", "ุจูุชูููู", "ุฃุฎุจุงุฑ_ุงููุฌููุนุงุช"]
    )


async def send_test_message():
    """Send a test news message to all configured chats"""
    # Create test news
    news = create_test_news()
    
    # Broadcast the news to all chats (which should now include our group)
    success, errors = await broadcast_news(news)
    
    if success > 0:
        logger.info(f"โ Test message sent successfully to {success} chats")
        return True
    else:
        logger.error(f"โ Failed to send test messages. Errors: {errors}")
        return False


async def main():
    """Main function"""
    print("๐ ุฅุถุงูุฉ ูุฌููุนุฉ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
    print("-" * 50)
    
    if len(sys.argv) < 3:
        # Get info from user
        print("๐ ุฃุฏุฎู ุฑุงุจุท ุงููุฌููุนุฉ:")
        group_link = input("> ").strip()
        
        print("\n๐ ุฃุฏุฎู ูุนุฑู ุงููุฌููุนุฉ:")
        print("(ููููู ุงูุญุตูู ุนูู ุงููุนุฑู ูู ูุทูุฑ ุงูุจูุชุ ุนุงุฏุฉู ูููู ุจุงูุตูุบุฉ -100xxxxxxxxxx)")
        chat_id = input("> ").strip()
    else:
        group_link = sys.argv[1]
        chat_id = sys.argv[2]
    
    # Clean database and add only the target group
    clean_test_chats()
    
    if not add_group_chat(chat_id, group_link):
        return
    
    print(f"\nโ ุชูุช ุฅุถุงูุฉ ุงููุฌููุนุฉ ุจูุนุฑู {chat_id} ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช")
    
    # Ask if user wants to send a test message
    print("\nูู ุชุฑูุฏ ุฅุฑุณุงู ุฑุณุงูุฉ ุงุฎุชุจุงุฑูุฉ ูููุฌููุนุฉุ (y/n)")
    choice = input("> ").strip().lower()
    
    if choice == 'y':
        print("\n๐ ุฌุงุฑู ุฅุฑุณุงู ุฑุณุงูุฉ ุงุฎุชุจุงุฑูุฉ...")
        success = await send_test_message()
        
        if success:
            print("โ ุชู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุงูุงุฎุชุจุงุฑูุฉ ุจูุฌุงุญ!")
            print("ุชุญูู ูู ุงููุฌููุนุฉ ููุชุฃูุฏ ูู ูุตูู ุงูุฑุณุงูุฉ")
        else:
            print("โ ูุดู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุงูุงุฎุชุจุงุฑูุฉ. ุชุญูู ูู ุงูุณุฌูุงุช ููุฒูุฏ ูู ุงูุชูุงุตูู.")
            print("ุชุฃูุฏ ูู:")
            print("1. ุฃู ุงูุจูุช ุนุถู ูู ุงููุฌููุนุฉ")
            print("2. ุฃู ููุจูุช ุตูุงุญูุงุช ุฅุฑุณุงู ุงูุฑุณุงุฆู")
            print("3. ุฃู ูุนุฑู ุงููุฌููุนุฉ ุตุญูุญ")
    else:
        print("\nูู ูุชู ุฅุฑุณุงู ุฑุณุงูุฉ ุงุฎุชุจุงุฑูุฉ.")
        print("ููููู ุงุฎุชุจุงุฑ ุงูุจูุช ูุงุญูุงู ุจุงุณุชุฎุฏุงู:")
        print("python test_webhook_endpoint.py")


if __name__ == "__main__":
    asyncio.run(main())